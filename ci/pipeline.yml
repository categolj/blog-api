---
resource_types:
- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource
    tag: v1.1.3
- name: maven
  type: docker-image
  source:
    repository: pivotalpa/maven-resource
    tag: 1.3.4
- name: kubernetes
  type: docker-image
  source:
    repository: zlabjp/kubernetes-resource
    tag: "1.8"

resources:
  - name: repo-master
    type: git
    source:
      uri: git@github.com:categolj/blog-api.git
      branch: master
      private_key: ((github-private-key))
  - name: repo-develop
    type: git
    source:
      uri: git@github.com:categolj/blog-api.git
      branch: develop
      private_key: ((github-private-key))
  - name: repo-version
    type: semver
    source:
      uri: git@github.com:categolj/blog-api-version.git
      branch: master
      private_key: ((github-private-key))
      file: version
      driver: git
      initial_version: 4.0.0
#  - name: cf-master
#    type: cf
#    source:
#      api: ((pws-api))
#      username: ((pws-username))
#      password: ((pws-password))
#      organization: ((pws-org))
#      space: production
#      skip_cert_check: true
#  - name: cf-develop
#    type: cf
#    source:
#      api: ((cf-api))
#      username: ((cf-username))
#      password: ((cf-password))
#      organization: ((cf-org))
#      space: blog-dev
#      skip_cert_check: true
  - name: docker
    type: docker-image
    source:
      repository: asia.gcr.io/fe-tmaki/blog-api
      username: _json_key
      password: ((gcr-key))
  - name: k8s-master
    type: kubernetes
    source:
      kubeconfig: ((kubeconfig))
  - name: nexus
    type: maven
    source:
      url: ((nexus-release-url))
      snapshot_url: ((nexus-snapshot-url))
      artifact: am.ik.blog:blog-api:jar
      username: ((nexus-username))
      password: ((nexus-password))
      skip_cert_check: true
  - name: slack-alert
    type: slack-notification
    source:
      url: ((slack-webhook-url))
  - name: mysql
    type: docker-image
    source:
      repository: mariadb
      tag: 10.0.30
jobs:
### Dev
- name: unit-test-develop
  plan:
    - aggregate:
      - get: repo
        resource: repo-develop
        trigger: true
      - get: mysql
        params:
          save: true
    - task: mvn-test
      privileged: true
      params:
        <<: *JAVA_OPS
      config: &MVN_TEST_CONFIG
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: making/dcind-jdk
        inputs:
        - name: repo
        - name: mysql
        caches:
        - path: repo/m2
        run:
          path: sh
          args:
          - -c
          - |
            set -e

            source /docker-lib.sh
            start_docker
            docker load -i mysql/image
            docker tag "$(cat mysql/image-id)" "$(cat mysql/repository):$(cat mysql/tag)"
            docker images

            cd repo
            rm -rf ~/.m2
            ln -fs $(pwd)/m2 ~/.m2

            docker-compose up -d
            sleep 3
            mvn test
            docker-compose down
      on_failure:
        put: slack-alert
        params:
          <<: *SLACK_FAILURE
- name: upload-to-nexus-snapshots
  plan:
  - get: repo
    resource: repo-develop
    passed:
    - unit-test-develop
    trigger: true
  - task: mvn-package
    config: &NEXUS_PACKAGE_CONFIG
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: maven
      inputs:
      - name: repo
      outputs:
      - name: build
      caches:
      - path: repo/m2
      run:
        path: bash
        args:
        - -c
        - |
          set -e
          cd repo
          rm -rf ~/.m2
          ln -fs $(pwd)/m2 ~/.m2
          mvn package -DskipTests=true
          cp target/*.jar ../build/
  - aggregate:
    - put: nexus
      params:
        file: build/*.jar
        pom_file: repo/pom.xml
      on_failure:
        put: slack-alert
        params:
          <<: *SLACK_FAILURE
#- name: deploy-develop
#  plan:
#  - get: repo
#    resource: repo-develop
#    passed:
#    - upload-to-nexus-snapshots
#    trigger: true
#  - get: nexus
#    passed:
#    - upload-to-nexus-snapshots
#  - put: cf-develop
#    params:
#      manifest: repo/manifest-dev.yml
#      path: nexus/*.jar
#      current_app_name: blog-api-dev
#      environment_variables:
#        SECURITY_USER_NAME: ((ops-username))
#        SECURITY_USER_PASSWORD: ((ops-password))
#    on_failure:
#      put: slack-alert
#      params:
#        <<: *SLACK_FAILURE
#    on_success:
#      put: slack-alert
#      params:
#        <<: *SLACK_SUCCESS
- name: docker-push-develop
  plan:
  - aggregate:
    - get: repo
      resource: repo-develop
      passed:
      - upload-to-nexus-snapshots
      trigger: true
    - get: repo-version
    - get: nexus
      passed:
      - upload-to-nexus-snapshots
  - task: update-docker
    config: &COPY_DOCKERFILE
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: ubuntu
      inputs:
      - name: repo
      - name: nexus
      outputs:
      - name: updated
      run:
        path: bash
        args:
        - -c
        - |
          set -e
          mv nexus/*.jar updated/app.jar
          cp repo/Dockerfile updated/Dockerfile
          cat updated/Dockerfile
  - put: docker
    params: &DOCKER_PUSH
      build: updated
      build_args:
        JAR_FILE: app.jar
    on_failure:
      put: slack-alert
      params:
        <<: *SLACK_FAILURE
    on_success:
      put: slack-alert
      params:
        <<: *SLACK_SUCCESS
### Prod
- name: merge-develop-to-master
  plan:
  - aggregate:
    - get: repo-src
      resource: repo-develop
      passed:
#      - deploy-develop
      - docker-push-develop
    - get: repo-dest
      resource: repo-master
  - task: merge-develop-to-master
    params:
      <<: *GIT_PARAMS
      SRC_BRANCH: develop
    config: &MERGE_SRC_TO_DEST
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: maven
      inputs:
      - name: repo-src
      - name: repo-dest
      outputs:
      - name: merged 
      run:
        path: bash
        args:
        - -c
        - |
          set -e
          shopt -s dotglob
          mv -f repo-dest/* merged/
          cd merged
          git config --global user.email "${GIT_EMAIL}"
          git config --global user.name "${GIT_NAME}"
          git remote add -f src ../repo-src
          git merge --no-edit src/${SRC_BRANCH}
    on_failure:
      put: slack-alert
      params:
        <<: *SLACK_FAILURE         
  - put: repo-master
    params:
      repository: merged
    on_failure:
      put: slack-alert
      params:
        <<: *SLACK_FAILURE
- name: unit-test-master
  plan:
  - aggregate:
    - get: repo
      resource: repo-master
      trigger: true
      passed:
      - merge-develop-to-master
    - get: mysql
      params:
        save: true
  - task: mvn-test
    privileged: true
    params:
      <<: *JAVA_OPS
    config:
      <<: *MVN_TEST_CONFIG
    on_failure:
      put: slack-alert
      params:
        <<: *SLACK_FAILURE 
- name: tag-master
  plan:
  - aggregate:
    - get: repo
      resource: repo-master
      trigger: true
      passed:
      - unit-test-master
    - get: repo-version
  - task: mvn-versions-set
    params:
      <<: *GIT_PARAMS
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: maven
      inputs:
      - name: repo
      - name: repo-version
      outputs:
      - name: output
      caches:
      - path: repo/m2   
      run:
        path: bash
        args:
        - -c
        - |
          set -e
          VERSION=`cat repo-version/number`
          cd repo
          rm -rf ~/.m2
          ln -fs $(pwd)/m2 ~/.m2
          mvn versions:set -DnewVersion=${VERSION}
          rm -f pom.xml.versionsBackup
          shopt -s dotglob
          shopt -s extglob
          mv -f !(m2) ../output/
          cd ../output
          git config --global user.email "${GIT_EMAIL}"
          git config --global user.name "${GIT_NAME}"
          git add -A
          git commit -m "Release ${VERSION}"
    on_failure:
      put: slack-alert
      params:
        <<: *SLACK_FAILURE 
  - put: repo-master
    params:
      repository: output
      tag: repo-version/number
    on_failure:
      put: slack-alert
      params:
        <<: *SLACK_FAILURE 
- name: upload-to-nexus-releases
  plan:
  - get: repo
    resource: repo-master
    passed:
    - tag-master
    trigger: true
  - task: mvn-package
    config:
      <<: *NEXUS_PACKAGE_CONFIG
    on_failure:
      put: slack-alert
      params:
        <<: *SLACK_FAILURE 
  - put: nexus
    params:
      file: build/*.jar
      pom_file: repo/pom.xml
    on_failure:
      put: slack-alert
      params:
        <<: *SLACK_FAILURE
#- name: deploy-master
#  plan:
#  - get: repo
#    resource: repo-master
#    passed:
#    - upload-to-nexus-releases
#    trigger: true
#  - get: nexus
#    passed:
#    - upload-to-nexus-releases
#  - put: cf-master
#    params:
#      manifest: repo/manifest.yml
#      path: nexus/*.jar
#      current_app_name: blog-api
#      environment_variables:
#        SECURITY_USER_NAME: ((ops-username))
#        SECURITY_USER_PASSWORD: ((ops-password))
#    on_failure:
#      put: slack-alert
#      params:
#        <<: *SLACK_FAILURE
#    on_success:
#      put: slack-alert
#      params:
#        <<: *SLACK_SUCCESS
- name: docker-push-master
  plan:
  - aggregate:
    - get: repo
      resource: repo-master
      passed:
      - upload-to-nexus-releases
      trigger: true
    - get: repo-version
    - get: nexus
      passed:
      - upload-to-nexus-releases
  - task: update-docker
    config:
      <<: *COPY_DOCKERFILE
  - put: docker
    params:
      <<: *DOCKER_PUSH
      tag: repo-version/number
      tag_as_latest: true
    on_failure:
      put: slack-alert
      params:
        <<: *SLACK_FAILURE
    on_success:
      put: slack-alert
      params:
        <<: *SLACK_SUCCESS
- name: deploy-k8s-master
  plan:
  - aggregate:
    - get: repo
      resource: repo-master
      passed:
      - docker-push-master
      trigger: true
    - get: repo-version
  - task: update-k8s-manifest
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: ubuntu
      inputs:
      - name: repo
      - name: repo-version
      outputs:
      - name: updated
      run:
        path: bash
        args:
        - -c
        - |
          set -e
          VERSION=`cat repo-version/number`
          sed "s/latest/${VERSION}/g" repo/k8s/blog-api.yml | sed "s/FIXME/Bump to ${VERSION}/g" > updated/blog-api.yml
  - put: k8s-master
    params:
      kubectl: apply -f updated/blog-api.yml
      wait_until_ready: 120
      wait_until_ready_selector: app=blog-api
    on_failure:
      put: slack-alert
      params:
        <<: *SLACK_FAILURE
    on_success:
      put: slack-alert
      params:
        <<: *SLACK_SUCCESS
- name: bump-to-next-patch-version
  plan:
  - aggregate:
    - get: repo-src
      resource: repo-master
      passed:
#      - deploy-master
      - deploy-k8s-master
      trigger: true
    - get: repo-dest
      resource: repo-develop
    - get: repo-version
      params:
        bump: patch
  - task: merge-master-to-develop
    params:
      <<: *GIT_PARAMS
      SRC_BRANCH: master
    config:
      <<: *MERGE_SRC_TO_DEST
    on_failure:
      put: slack-alert
      params:
        <<: *SLACK_FAILURE 
  - task: just-move
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: maven
      inputs:
      - name: merged
      outputs:
      - name: repo
      run:
        path: bash
        args:
        - -c
        - |
          set -e
          shopt -s dotglob
          cp -r merged/* repo/
    on_failure:
      put: slack-alert
      params:
        <<: *SLACK_FAILURE 
  - task: mvn-versions-set
    params:
      <<: *GIT_PARAMS
    config: &MVN_VERSIONS_SET_CONFIG
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: maven
      inputs:
      - name: repo
      - name: repo-version
      outputs:
      - name: output
      caches:
      - path: repo/m2   
      run:
        path: bash
        args:
        - -c
        - |
          set -e
          VERSION=`cat repo-version/number`-SNAPSHOT
          cd repo
          rm -rf ~/.m2
          ln -fs $(pwd)/m2 ~/.m2
          mvn versions:set -DnewVersion=${VERSION} -DallowSnapshots
          rm -f pom.xml.versionsBackup
          shopt -s dotglob
          shopt -s extglob
          mv -f !(m2) ../output/
          cd ../output
          git config --global user.email "${GIT_EMAIL}"
          git config --global user.name "${GIT_NAME}"
          git add -A
          git commit -m "Bump to ${VERSION}"
    on_failure:
      put: slack-alert
      params:
        <<: *SLACK_FAILURE 
  - put: repo-develop
    params:
      repository: output
    on_failure:
      put: slack-alert
      params:
        <<: *SLACK_FAILURE 
  - put: repo-version
    params:
      file: repo-version/number
    on_failure:
      put: slack-alert
      params:
        <<: *SLACK_FAILURE 
    on_success:
      put: slack-alert
      params:
        <<: *SLACK_SUCCESS
- name: bump-to-next-minor-version
  plan:
  - aggregate:
    - get: repo
      resource: repo-develop
    - get: repo-version
      params:
        bump: minor
  - task: mvn-versions-set
    params:
      <<: *GIT_PARAMS
    config:
      <<: *MVN_VERSIONS_SET_CONFIG
  - put: repo-develop
    params:
      repository: output
  - put: repo-version
    params:
      file: repo-version/number
- name: bump-to-next-major-version
  plan:
  - aggregate:
    - get: repo
      resource: repo-develop
    - get: repo-version
      params:
        bump: major
  - task: mvn-versions-set
    params:
      <<: *GIT_PARAMS
    config:
      <<: *MVN_VERSIONS_SET_CONFIG
  - put: repo-develop
    params:
      repository: output
  - put: repo-version
    params:
      file: repo-version/number
    on_failure:
      put: slack-alert
      params:
        <<: *SLACK_FAILURE 
    on_success:
      put: slack-alert
      params:
        <<: *SLACK_SUCCESS


params:
  git: &GIT_PARAMS
    GIT_EMAIL: ((git-email))
    GIT_NAME: ((git-name))
    SRC_BRANCH: develop
  java_opts: &JAVA_OPS
    _JAVA_OPTIONS: -Duser.timezone=Asia/Tokyo -Duser.language=ja -Duser.country=JP -Djava.security.egd=file:/dev/./urandom
  slack_on_success_params: &SLACK_SUCCESS
    channel: '#concourse'
    text: |
      <!here> :white_check_mark: *$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME* succeeded with build <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|$BUILD_NAME>!
  slack_on_failure_params: &SLACK_FAILURE
    channel: '#concourse'
    text: |
      <!here> :rotating_light: *$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME* failed with build <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|$BUILD_NAME>!