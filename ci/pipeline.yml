---
resource_types:
- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource
    tag: v1.1.3
- name: maven
  type: docker-image
  source:
    repository: pivotalpa/maven-resource
    tag: 1.3.5
- name: kubernetes
  type: docker-image
  source:
    repository: zlabjp/kubernetes-resource
    tag: "1.12"

resources:
  - name: utils
    type: git
    source:
      uri: https://github.com/making/ci-utils.git
      branch: master
  - name: repo-master
    type: git
    source:
      uri: git@github.com:categolj/blog-api.git
      branch: master
      private_key: ((github-private-key))
  - name: repo-develop
    type: git
    source:
      uri: git@github.com:categolj/blog-api.git
      branch: develop
      private_key: ((github-private-key))
      ignore_paths:
      - ci/*
      - README.md
  - name: repo-version
    type: semver
    source:
      uri: git@github.com:categolj/blog-api-version.git
      branch: master
      private_key: ((github-private-key))
      file: version
      driver: git
      initial_version: 4.0.0
  - name: docker
    type: docker-image
    source:
      repository: asia.gcr.io/fe-tmaki/blog-api
      username: _json_key
      password: ((gcr-key))
  - name: k8s-master
    type: kubernetes
    source:
      kubeconfig: ((kubeconfig-master))
  - name: k8s-develop
    type: kubernetes
    source:
      kubeconfig: ((kubeconfig-develop))
  - name: nexus
    type: maven
    source:
      url: ((nexus-release-url))
      snapshot_url: ((nexus-snapshot-url))
      artifact: am.ik.blog:blog-api:jar
      username: ((nexus-username))
      password: ((nexus-password))
      skip_cert_check: true
  - name: slack-alert
    type: slack-notification
    source:
      url: ((slack-webhook-url))

jobs:
### Dev
- name: unit-test-develop
  build_logs_to_retain: 5
  plan:
    - aggregate:
      - get: repo
        resource: repo-develop
        trigger: true
      - get: utils
    - task: mvn-test
      privileged: true
      params:
        <<: *JAVA_OPS
      config: &MVN_TEST_CONFIG
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: springci/spring-boot-jdk11-ci-image
            tag: master
        inputs:
        - name: repo
        - name: utils
        caches:
        - path: maven
        run:
          path: bash
          args:
          - -c
          - |
            set -e
            source /opt/concourse-java.sh
            setup_symlinks

            source /docker-lib.sh
            start_docker
            docker run -d \
              --name postgres \
              -e "POSTGRES_DB=blog_test" \
              -e "POSTGRES_PASSWORD=testdb" \
              -e "TZ=Japan" \
              -p 5432:5432 \
              postgres:9.6.10
            docker ps
            cd repo
            ./mvnw -f pom.xml test
      on_failure:
        put: slack-alert
        params:
          <<: *SLACK_FAILURE
- name: upload-to-nexus-snapshots
  plan:
  - get: repo
    resource: repo-develop
    passed:
    - unit-test-develop
    trigger: true
  - task: mvn-package
    privileged: true
    params:
      <<: *JAVA_OPS
    config: &NEXUS_PACKAGE_CONFIG
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: springci/spring-boot-jdk11-ci-image
          tag: master
      inputs:
      - name: repo
      outputs:
      - name: build
      caches:
      - path: maven
      run:
        path: bash
        args:
        - -c
        - |
          set -e
          source /opt/concourse-java.sh
          setup_symlinks

          source /docker-lib.sh
          start_docker
          docker run -d \
            --name postgres \
            -e "POSTGRES_DB=blog_test" \
            -e "POSTGRES_PASSWORD=testdb" \
            -e "TZ=Japan" \
            -p 5432:5432 \
            postgres:9.6.10
          docker ps
          cd repo
          ./mvnw -f pom.xml package
          cp target/*.jar ../build/
  - aggregate:
    - put: nexus
      params:
        file: build/*.jar
        pom_file: repo/pom.xml
      on_failure:
        put: slack-alert
        params:
          <<: *SLACK_FAILURE
- name: docker-push-develop
  plan:
  - aggregate:
    - get: repo
      resource: repo-develop
      passed:
      - upload-to-nexus-snapshots
      trigger: true
    - get: repo-version
    - get: nexus
      passed:
      - upload-to-nexus-snapshots
  - task: build-image
    privileged: true
    config: &BUILD_IMAGE
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: springci/spring-boot-ci-image
          tag: master
      inputs:
      - name: repo
      - name: nexus
      outputs:
      - name: image
      caches:
      - path: repo/packs
      run:
        path: bash
        args:
        - -c
        - |
          set -e
          cd repo
          curl -L -J -s -o cf-cli.tgz "https://cli.run.pivotal.io/stable?release=linux64-binary&version=6.40.0"
          tar -zxf cf-cli.tgz -C /usr/local/bin
          cf install-plugin -f cflocal
          source /docker-lib.sh
          start_docker

          mv packs/.*.cache ./ || true
          cf local stage blog-api -p $(ls ../nexus/*.jar)
          cf local export blog-api -r making/blog-api:latest
          mv .*.cache packs/ || true
          docker images
          docker save making/blog-api:latest  > ../image/image
          docker images --no-trunc --digests making/blog-api --format "{{.ID}}" > ../image/image-id
  - put: docker
    params:
      load: image
    on_failure:
      put: slack-alert
      params:
        <<: *SLACK_FAILURE
    on_success:
      put: slack-alert
      params:
        <<: *SLACK_SUCCESS
- name: deploy-k8s-develop
  plan:
  - aggregate:
    - get: repo
      resource: repo-develop
      passed:
      - docker-push-develop
      trigger: true
    - get: docker
      passed:
      - docker-push-develop
  - task: update-k8s-manifest
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: ubuntu
      inputs:
      - name: repo
      - name: docker
      outputs:
      - name: updated
      run:
        path: bash
        args:
        - -c
        - |
          set -e
          DIGEST=`cat docker/digest`
          sed "s/:latest/@${DIGEST}/g" repo/k8s/blog-api.yml |
          sed "s/FIXME/Bump to ${DIGEST} $(date)/g" | \
          sed "s/INFO_DOCKER_DIGEST/${DIGEST}/g" | \
          sed "s/namespace: blog/namespace: blog-dev/g" | \
          sed "s/ik.am/k8s.bosh.tokyo/g" | \
          sed "s/3008/3058/g" > updated/blog-api.yml
  - put: k8s-develop
    params:
      kubectl: apply -f updated/blog-api.yml
      wait_until_ready: 120
      wait_until_ready_selector: app=blog-api
    on_failure:
      put: slack-alert
      params:
        <<: *SLACK_FAILURE
    on_success:
      put: slack-alert
      params:
        <<: *SLACK_SUCCESS
### Prod
- name: merge-develop-to-master
  plan:
  - aggregate:
    - get: repo-src
      resource: repo-develop
      passed:
      - deploy-k8s-develop
    - get: repo-dest
      resource: repo-master
  - task: merge-develop-to-master
    params:
      <<: *GIT_PARAMS
      SRC_BRANCH: develop
    config: &MERGE_SRC_TO_DEST
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: maven
      inputs:
      - name: repo-src
      - name: repo-dest
      outputs:
      - name: merged 
      run:
        path: bash
        args:
        - -c
        - |
          set -e
          shopt -s dotglob
          mv -f repo-dest/* merged/
          cd merged
          git config --global user.email "${GIT_EMAIL}"
          git config --global user.name "${GIT_NAME}"
          git remote add -f src ../repo-src
          git merge --no-edit src/${SRC_BRANCH}
    on_failure:
      put: slack-alert
      params:
        <<: *SLACK_FAILURE         
  - put: repo-master
    params:
      repository: merged
    on_failure:
      put: slack-alert
      params:
        <<: *SLACK_FAILURE
- name: unit-test-master
  build_logs_to_retain: 5
  plan:
  - aggregate:
    - get: repo
      resource: repo-master
      trigger: true
      passed:
      - merge-develop-to-master
    - get: utils
  - task: mvn-test
    privileged: true
    params:
      <<: *JAVA_OPS
    config:
      <<: *MVN_TEST_CONFIG
    on_failure:
      put: slack-alert
      params:
        <<: *SLACK_FAILURE 
- name: tag-master
  plan:
  - aggregate:
    - get: repo
      resource: repo-master
      trigger: true
      passed:
      - unit-test-master
    - get: repo-version
  - task: mvn-versions-set
    params:
      <<: *GIT_PARAMS
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: maven
      inputs:
      - name: repo
      - name: repo-version
      outputs:
      - name: output
      caches:
      - path: repo/m2   
      run:
        path: bash
        args:
        - -c
        - |
          set -e
          VERSION=`cat repo-version/number`
          cd repo
          rm -rf ~/.m2
          ln -fs $(pwd)/m2 ~/.m2
          mvn versions:set -DnewVersion=${VERSION}
          rm -f pom.xml.versionsBackup
          shopt -s dotglob
          shopt -s extglob
          mv -f !(m2) ../output/
          cd ../output
          git config --global user.email "${GIT_EMAIL}"
          git config --global user.name "${GIT_NAME}"
          git add -A
          git commit -m "Release ${VERSION}"
    on_failure:
      put: slack-alert
      params:
        <<: *SLACK_FAILURE 
  - put: repo-master
    params:
      repository: output
      tag: repo-version/number
    on_failure:
      put: slack-alert
      params:
        <<: *SLACK_FAILURE 
- name: upload-to-nexus-releases
  plan:
  - aggregate:
    - get: repo
      resource: repo-master
      passed:
      - tag-master
      trigger: true
    - get: repo-version
      passed:
      - tag-master
  - task: mvn-package
    privileged: true
    params:
      <<: *JAVA_OPS
    config:
      <<: *NEXUS_PACKAGE_CONFIG
    on_failure:
      put: slack-alert
      params:
        <<: *SLACK_FAILURE 
  - put: nexus
    params:
      file: build/*.jar
      pom_file: repo/pom.xml
    on_failure:
      put: slack-alert
      params:
        <<: *SLACK_FAILURE
- name: docker-push-master
  plan:
  - aggregate:
    - get: repo
      resource: repo-master
      passed:
      - upload-to-nexus-releases
      trigger: true
    - get: repo-version
      passed:
      - upload-to-nexus-releases
    - get: nexus
      passed:
      - upload-to-nexus-releases
  - task: build-image
    privileged: true
    config:
      <<: *BUILD_IMAGE
  - put: docker
    params:
      load: image
      tag: repo-version/number
      tag_as_latest: true
    on_failure:
      put: slack-alert
      params:
        <<: *SLACK_FAILURE
    on_success:
      put: slack-alert
      params:
        <<: *SLACK_SUCCESS
- name: deploy-k8s-master
  plan:
  - aggregate:
    - get: repo
      resource: repo-master
      passed:
      - docker-push-master
      trigger: true
    - get: repo-version
      passed:
      - docker-push-master
    - get: docker
      passed:
      - docker-push-master
  - task: update-k8s-manifest
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: ubuntu
      inputs:
      - name: repo
      - name: repo-version
      - name: docker
      outputs:
      - name: updated
      run:
        path: bash
        args:
        - -c
        - |
          set -e
          VERSION=`cat repo-version/number`
          DIGEST=`cat docker/digest`
          sed "s/latest/${VERSION}/g" repo/k8s/blog-api.yml | sed "s/FIXME/Bump to ${VERSION} $(date)/g" | sed "s/INFO_DOCKER_DIGEST/${DIGEST}/g" > updated/blog-api.yml
  - put: k8s-master
    params:
      kubectl: apply -f updated/blog-api.yml
      wait_until_ready: 120
      wait_until_ready_selector: app=blog-api
    on_failure:
      put: slack-alert
      params:
        <<: *SLACK_FAILURE
    on_success:
      put: slack-alert
      params:
        <<: *SLACK_SUCCESS
- name: bump-to-next-patch-version
  plan:
  - aggregate:
    - get: repo-src
      resource: repo-master
      passed:
      - deploy-k8s-master
      trigger: true
    - get: repo-dest
      resource: repo-develop
    - get: repo-version
      passed:
      - deploy-k8s-master
      params:
        bump: patch
  - task: merge-master-to-develop
    params:
      <<: *GIT_PARAMS
      SRC_BRANCH: master
    config:
      <<: *MERGE_SRC_TO_DEST
    on_failure:
      put: slack-alert
      params:
        <<: *SLACK_FAILURE 
  - task: just-move
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: maven
      inputs:
      - name: merged
      outputs:
      - name: repo
      run:
        path: bash
        args:
        - -c
        - |
          set -e
          shopt -s dotglob
          cp -r merged/* repo/
    on_failure:
      put: slack-alert
      params:
        <<: *SLACK_FAILURE 
  - task: mvn-versions-set
    params:
      <<: *GIT_PARAMS
    config: &MVN_VERSIONS_SET_CONFIG
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: maven
      inputs:
      - name: repo
      - name: repo-version
      outputs:
      - name: output
      caches:
      - path: repo/m2   
      run:
        path: bash
        args:
        - -c
        - |
          set -e
          VERSION=`cat repo-version/number`-SNAPSHOT
          cd repo
          rm -rf ~/.m2
          ln -fs $(pwd)/m2 ~/.m2
          mvn versions:set -DnewVersion=${VERSION} -DallowSnapshots
          rm -f pom.xml.versionsBackup
          shopt -s dotglob
          shopt -s extglob
          mv -f !(m2) ../output/
          cd ../output
          git config --global user.email "${GIT_EMAIL}"
          git config --global user.name "${GIT_NAME}"
          git add -A
          git commit -m "Bump to ${VERSION}"
    on_failure:
      put: slack-alert
      params:
        <<: *SLACK_FAILURE 
  - put: repo-develop
    params:
      repository: output
    on_failure:
      put: slack-alert
      params:
        <<: *SLACK_FAILURE 
  - put: repo-version
    params:
      file: repo-version/number
    on_failure:
      put: slack-alert
      params:
        <<: *SLACK_FAILURE 
    on_success:
      put: slack-alert
      params:
        <<: *SLACK_SUCCESS
- name: bump-to-next-minor-version
  plan:
  - aggregate:
    - get: repo
      resource: repo-develop
    - get: repo-version
      params:
        bump: minor
  - task: mvn-versions-set
    params:
      <<: *GIT_PARAMS
    config:
      <<: *MVN_VERSIONS_SET_CONFIG
  - put: repo-develop
    params:
      repository: output
  - put: repo-version
    params:
      file: repo-version/number
- name: bump-to-next-major-version
  plan:
  - aggregate:
    - get: repo
      resource: repo-develop
    - get: repo-version
      params:
        bump: major
  - task: mvn-versions-set
    params:
      <<: *GIT_PARAMS
    config:
      <<: *MVN_VERSIONS_SET_CONFIG
  - put: repo-develop
    params:
      repository: output
  - put: repo-version
    params:
      file: repo-version/number
    on_failure:
      put: slack-alert
      params:
        <<: *SLACK_FAILURE 
    on_success:
      put: slack-alert
      params:
        <<: *SLACK_SUCCESS


params:
  git: &GIT_PARAMS
    GIT_EMAIL: ((git-email))
    GIT_NAME: ((git-name))
    SRC_BRANCH: develop
  java_opts: &JAVA_OPS
    _JAVA_OPTIONS: -Duser.timezone=Asia/Tokyo -Duser.language=ja -Duser.country=JP -Djava.security.egd=file:/dev/./urandom
    SPRING_DATASOURCE_USERNAME: postgres
    SPRING_DATASOURCE_PASSWORD: testdb
  slack_on_success_params: &SLACK_SUCCESS
    channel: '#concourse'
    text: |
      <!here> :white_check_mark: *$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME* succeeded with build <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|$BUILD_NAME>!
  slack_on_failure_params: &SLACK_FAILURE
    channel: '#concourse'
    text: |
      <!here> :rotating_light: *$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME* failed with build <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|$BUILD_NAME>!