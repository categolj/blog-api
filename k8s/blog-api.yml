kind: Service
apiVersion: v1
metadata:
  name: blog-rsocket
  namespace: blog
  labels:
    app: blog-rsocket
spec:
  selector:
    app: blog-rsocket
  ports:
  - protocol: TCP
    port: 8080
    name: http
  type: ClusterIP
---
apiVersion: gateway.cloud.ik.am/v1beta1
kind: RouteDefinition
metadata:
  name: blog-rsocket-actuator
  namespace: blog
spec:
  route:
    uri: http://blog-rsocket.blog.svc.cluster.local:8080
    predicates:
    - Host=blog-rsocket.ik.am
    - Path=/actuator/*
    filters:
    - RequestLogging=
    - name: Retry
      args:
        retries: "3"
        statuses: BAD_GATEWAY
---
apiVersion: gateway.cloud.ik.am/v1beta1
kind: RouteDefinition
metadata:
  name: blog-rsocket-webhook
  namespace: blog
spec:
  route:
    uri: http://blog-rsocket.blog.svc.cluster.local:8080
    predicates:
    - Host=blog-rsocket.ik.am
    - Path=/webhook
    filters:
    - RequestLogging=
    - name: Retry
      args:
        retries: "3"
        statuses: BAD_GATEWAY        
---
apiVersion: gateway.cloud.ik.am/v1beta1
kind: RouteDefinition
metadata:
  name: blog-rsocket
  namespace: blog
spec:
  route:
    order: -100
    uri: ws://blog-rsocket.blog.svc.cluster.local:8080
    predicates:
    - Host=blog.ik.am
    - Path=/rsocket
    filters:
    - RequestLogging=
    - name: Retry
      args:
        retries: "3"
        statuses: BAD_GATEWAY
---
apiVersion: gateway.cloud.ik.am/v1beta1
kind: RouteDefinition
metadata:
  name: blog-api
  namespace: blog
spec:
  route:
    order: -100
    predicates:
    - Host=blog-api.ik.am
    filters:
    - RequestLogging=
    - SetResponseHeader=Access-Control-Allow-Origin, *
    - SetResponseHeader=Access-Control-Allow-Methods, GET, OPTIONS
    - SetResponseHeader=Access-Control-Max-Age, 3600
    - SetResponseHeader=Access-Control-Allow-Headers, *
    - args:
        retries: "3"
        statuses: BAD_GATEWAY
      name: Retry
    uri: http://blog-rsocket.blog.svc.cluster.local:8080
---
apiVersion: gateway.cloud.ik.am/v1beta1
kind: RouteDefinition
metadata:
  name: blog-api-lagacy
  namespace: blog
spec:
  route:
    order: -101
    predicates:
    - Host=blog-api.ik.am
    - Path=/api/**
    filters:
    - RequestLogging=
    - SetResponseHeader=Access-Control-Allow-Origin, *
    - SetResponseHeader=Access-Control-Allow-Methods, GET, OPTIONS
    - SetResponseHeader=Access-Control-Max-Age, 3600
    - SetResponseHeader=Access-Control-Allow-Headers, *
    - RewritePath=/api(?<segment>/?.*), $\{segment}
    - name: Retry
      args:
        retries: "3"
        statuses: BAD_GATEWAY
    uri: http://blog-rsocket.blog.svc.cluster.local:8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: blog-rsocket
  namespace: blog
  labels:
    app: blog-rsocket
spec:
  replicas: 2
  selector:
    matchLabels:
      app: blog-rsocket  
  revisionHistoryLimit: 4
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: blog-rsocket
      annotations:
        kubernetes.io/change-cause: "FIXME"
    spec:
      imagePullSecrets:
      - name: harbor-secret
      containers:
      - name: blog-rsocket
        image: making/blog-api:5.0.0-SNAPSHOT
        ports:
        - containerPort: 8080
          name: http
        env:
        - name: DATABASE_URL
          value: "postgresql://${POSTGRES_USERNAME}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:5432/${POSTGRES_DB}"
        - name: SERVER_PORT
          value: "8080"
        - name: SPRING_PROFILES_ACTIVE
          value: kubernetes
        - name: JAVA_OPTS
          value: " -XX:ReservedCodeCacheSize=32M -Xss512k -XX:+PrintCodeCache -Duser.timezone=Asia/Tokyo -Duser.language=ja -Duser.country=JP -Dfile.encoding=UTF-8 -Dinfo.docker.digest=INFO_DOCKER_DIGEST -XX:ActiveProcessorCount=2"
        - name: BPL_JVM_THREAD_COUNT
          value: "32"
        - name: LOGGING_EXCEPTION_CONVERSION_WORD
          value: "\t%replace(%replace(%xEx){'\n','@n@'}){'\t','    '}%nopex"
        - name: LOGGING_PATTERN_CONSOLE
          value: "%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${logging.pattern.level:%5p}) %clr(${PID: }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %replace(%m){'\n','@n@'}${logging.exception-conversion-word:%wEx}%n"
        - name: SPRING_ZIPKIN_ENABLED
          value: "true"
        - name: SPRING_ZIPKIN_SERVICE_NAME
          value: "${INFO_K8S_NAMESPACE}:rsocket"
        - name: SPRING_ZIPKIN_BASE_URL
          value: https://zipkin.dev.ik.am
        - name: SPRING_DATASOURCE_URL
          value: "jdbc:postgresql://${POSTGRES_HOST}:5432/${POSTGRES_DB}"
        - name: USER
          value: vcap
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: blog-db-secret
              key: postgres-password
        - name: POSTGRES_USERNAME
          valueFrom:
            secretKeyRef:
              name: blog-db-secret
              key: postgres-user
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: blog-db-secret
              key: postgres-db
        - name: POSTGRES_HOST
          valueFrom:
            secretKeyRef:
              name: blog-db-secret
              key: postgres-host
        - name: SPRING_SECURITY_USER_NAME
          valueFrom:
            secretKeyRef:
              name: blog-config-secret
              key: ops-username
        - name: SPRING_SECURITY_USER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: blog-config-secret
              key: ops-password
        - name: BLOG_GITHUB_ACCESS_TOKEN
          valueFrom:
            secretKeyRef:
              name: blog-config-secret
              key: github-access-token
        - name: BLOG_GITHUB_WEBHOOK_SECRET
          valueFrom:
            secretKeyRef:
              name: blog-config-secret
              key: github-webhook-secret
        - name: INFO_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: INFO_K8S_POD
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: INFO_K8S_APP
          value: "${spring.application.name}"
        - name: INFO_JAVA_VERSION
          value: "${java.runtime.version}"
        - name: INFO_JAVA_VENDOR
          value: "${java.vm.vendor}"
        - name: MANAGEMENT_METRICS_EXPORT_PROMETHEUS_RSOCKET_HOST
          value: prometheus-proxy.dev.bosh.tokyo
        - name: MANAGEMENT_METRICS_TAGS_ORGANIZATION
          value: cfcr-aws
        - name: MANAGEMENT_METRICS_TAGS_SPACE
          value: "${INFO_K8S_NAMESPACE}"
        - name: MANAGEMENT_METRICS_TAGS_APPLICATION
          value: "${INFO_K8S_APP}"
        - name: MANAGEMENT_METRICS_TAGS_INSTANCE_ID
          value: "${INFO_K8S_POD}"
        - name: MANAGEMENT_METRICS_EXPORT_WAVEFRONT_ENABLED
          value: "true"
        - name: MANAGEMENT_METRICS_EXPORT_WAVEFRONT_APITOKEN
          value: ea46143b-b308-4691-9da8-024a28a9bc03
        - name: MANAGEMENT_METRICS_EXPORT_WAVEFRONT_URI
          value: https://wavefront.surf
        - name: WAVEFRONT_APPLICATION_CLUSTER
          value: "${MANAGEMENT_METRICS_TAGS_ORGANIZATION}"
        - name: WAVEFRONT_APPLICATION_NAME
          value: "${MANAGEMENT_METRICS_TAGS_SPACE}"
        - name: WAVEFRONT_APPLICATION_SERVICE
          value: "${MANAGEMENT_METRICS_TAGS_APPLICATION}"
        - name: WAVEFRONT_APPLICATION_SHARD
          value: "${MANAGEMENT_METRICS_TAGS_INSTANCE_ID}"
        resources:
          limits:
            memory: "256Mi"
          requests:
            memory: "256Mi"
        readinessProbe:
          httpGet:
            path: /actuator/health/readiness
            port: 8080
          initialDelaySeconds: 15
          timeoutSeconds: 3
          periodSeconds: 10
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /actuator/health/liveness
            port: 8080
          initialDelaySeconds: 180
          timeoutSeconds: 3
          periodSeconds: 10
          failureThreshold: 3
      affinity:
         podAntiAffinity:
           requiredDuringSchedulingIgnoredDuringExecution:
             - labelSelector:
                 matchExpressions:
                   - key: "app"
                     operator: In
                     values:
                     - blog-rsocket
               topologyKey: "kubernetes.io/hostname"
---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: blog-rsocket
  namespace: blog
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: blog-rsocket
