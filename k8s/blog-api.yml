kind: Service
apiVersion: v1
metadata:
  name: blog-api-service
  namespace: blog
  labels:
    app: blog-api
  annotations:
    spring.cloud.gateway/routes: |
      predicates:
      - Host=blog-api.ik.am
      filters:
      - RequestLogging
      - name: Retry
        args:
          retries: 3
          statuses: BAD_GATEWAY
spec:
  selector:
    app: blog-api
  ports:
  - protocol: TCP
    port: 8080
    nodePort: 30080
    name: http
  type: NodePort
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: blog-api
  namespace: blog
  labels:
    app: blog-api
spec:
  replicas: 2
  revisionHistoryLimit: 4
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: blog-api
      annotations:
        kubernetes.io/change-cause: "FIXME"
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: /actuator/prometheus
    spec:
      imagePullSecrets:
      - name: harbor-secret
      containers:
      - name: blog-api
        image: asia.gcr.io/fe-tmaki/blog-api:latest
        ports:
        - containerPort: 8080
          name: http
        env:
        - name: SERVER_PORT
          value: "8080"
        - name: SPRING_PROFILES_ACTIVE
          value: kubernetes
        - name: _JAVA_OPTIONS
          value: "-Duser.timezone=Asia/Tokyo -Duser.language=ja -Duser.country=JP -Dinfo.docker.digest=INFO_DOCKER_DIGEST"
        - name: SPRING_ZIPKIN_SERVICE_NAME
          value: "${INFO_K8S_NAMESPACE}:blog-api"
        - name: SPRING_DATASOURCE_URL
          value: "jdbc:postgresql://${POSTGRES_HOST}:5432/${POSTGRES_DB}"
        - name: SPRING_DATASOURCE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: blog-db-secret
              key: postgres-password
        - name: SPRING_DATASOURCE_USERNAME
          valueFrom:
            secretKeyRef:
              name: blog-db-secret
              key: postgres-user
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: blog-db-secret
              key: postgres-db
        - name: POSTGRES_HOST
          valueFrom:
            secretKeyRef:
              name: blog-db-secret
              key: postgres-host
        - name: SPRING_SECURITY_USER_NAME
          valueFrom:
            secretKeyRef:
              name: blog-config-secret
              key: ops-username
        - name: SPRING_SECURITY_USER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: blog-config-secret
              key: ops-password
        - name: BLOG_GITHUB_ACCESS_TOKEN
          valueFrom:
            secretKeyRef:
              name: blog-config-secret
              key: github-access-token
        - name: BLOG_GITHUB_WEBHOOK_SECRET
          valueFrom:
            secretKeyRef:
              name: blog-config-secret
              key: github-webhook-secret
        - name: INFO_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: INFO_K8S_POD
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: INFO_K8S_APP
          value: "${spring.application.name}"
        - name: MANAGEMENT_METRICS_TAGS_NAMESPACE
          value: "${INFO_K8S_NAMESPACE}"
        - name: MANAGEMENT_METRICS_TAGS_POD
          value: "${INFO_K8S_POD}"
        - name: MANAGEMENT_METRICS_TAGS_APP
          value: "${INFO_K8S_APP}"
        volumeMounts:
        - name: tmp
          mountPath: /home/vcap/tmp
        resources:
          limits:
            memory: "384Mi"
          requests:
            memory: "384Mi"
        readinessProbe:
          httpGet:
            path: /actuator/health
            port: 8080
          initialDelaySeconds: 15
          timeoutSeconds: 3
          periodSeconds: 10
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 8080
          initialDelaySeconds: 180
          timeoutSeconds: 3
          periodSeconds: 10
          failureThreshold: 3
      affinity:
         podAntiAffinity:
           requiredDuringSchedulingIgnoredDuringExecution:
             - labelSelector:
                 matchExpressions:
                   - key: "app"
                     operator: In
                     values:
                     - blog-api
               topologyKey: "kubernetes.io/hostname"

      volumes:
      - name: tmp
        emptyDir: {}
---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: blog-api
  namespace: blog
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: blog-api
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  labels:
    k8s-app: blog-api
  name: blog-api
  namespace: blog
spec:
  endpoints:
    - interval: 30s
      port: http
      path: /actuator/prometheus
      basicAuth:
        username:
          name: blog-config-secret
          key: ops-username
        password:
          name: blog-config-secret
          key: ops-password
  namespaceSelector:
    matchNames:
      - blog
  selector:
    matchLabels:
      app: blog-api
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: prometheus-k8s
  namespace: blog
rules:
  - apiGroups:
      - ""
    resources:
      - nodes
      - services
      - endpoints
      - pods
    verbs:
      - get
      - list
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: prometheus-k8s
  namespace: blog
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: prometheus-k8s
subjects:
  - kind: ServiceAccount
    name: prometheus-k8s
    namespace: monitoring
